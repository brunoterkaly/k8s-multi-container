# Docker image
# Build a Docker image to deploy, run, or push to a container registry.
# Add steps that use Docker Compose, tag images, push to a registry, run an image, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

pool:
  vmImage: 'Ubuntu-16.04'

variables:
  configuration: debug
  projectName: py-red
  buildDir: Build
  imageName: $(projectName):$(build.buildId)
  registryName: azureregistrykubernetes
  registryServerName: $(registryName).azurecr.io

  dockerId: brunoterkaly
  azureResourceGroup: rg-my-aks-cluster
  kubernetesCluster: my-aks-cluster
  azureContainerRegistry: azureregistrykubernetes.azurecr.io

#==================================================================
# TRIGGERS
#==================================================================
trigger:
  branches:
    include:
    - master
    - features/*
  paths:
    include:
    - k8s-multi-container

#==================================================================
# STEPS SECTION
#==================================================================

steps:

#==================================================================
# BUILD IMAGE
#==================================================================
- bash: docker build -f $(system.defaultWorkingDirectory)/$(buildDir)/Dockerfile -t $(registryServerName)/$(imageName) $(system.defaultWorkingDirectory)/$(buildDir)
- bash: docker build -f $(system.defaultWorkingDirectory)/$(buildDir)/Dockerfile -t $(registryServerName)/$(projectName):latest $(system.defaultWorkingDirectory)/$(buildDir)
  displayName: 'docker build'

- bash: docker login $(registryServerName) -u $(registryLogin) -p $(registryPassword)
  displayName: 'docker login'

#==================================================================
# PUSH IMAGE
#==================================================================
- bash: |
    docker push  $(registryServerName)/$(imageName)
    docker push $(registryServerName)/$(projectName):latest
  displayName: 'docker push'

#==================================================================
# Install Helm
#==================================================================
HelmInstaller@0
  displayName: 'Install Helm'
  inputs:
    helmVersion: 2.12.3

#==================================================================
# Package up the charts with Helm
#==================================================================
# - bash: helm package --version $(build.buildId) --destination $(build.artifactStagingDirectory) $(system.defaultWorkingDirectory)/$(projectName)/charts/$(projectName)
#   displayName: 'helm package'

#==================================================================
# Login into Azure using Service Principal
#==================================================================
# - bash: az login --service-principal -u $(registryLogin) -p $(registryPassword) -t $(tenantId)
#   displayName: 'az login'

#==================================================================
# Deploy to
#==================================================================
# - bash: az acr helm push -n $(registryName) $(build.artifactStagingDirectory)/$(projectName)-$(build.buildId).tgz
#   displayName: 'az acr helm push'

#==================================================================
# Misc Commands
#==================================================================
- bash:
   echo "Default Working Directory"
- bash:
   echo $(system.defaultWorkingDirectory)
- bash:
   ls -latr $(system.defaultWorkingDirectory)

- bash:
   echo "Project Name"
- bash:
    echo $(projectName)

- bash: echo $(registryServerName)

- bash: echo $(imageName)

#==================================================================
# Other snippets
#==================================================================
#condition: and(succeeded(), eq(variables['build.sourceBranch'], 'refs/heads/master'))
#- bash: docker build -f $(system.defaultWorkingDirectory)/$(projectName)/Dockerfile -t $(registryServerName)/$(imageName):$(build.buildId) -t $(registryServerName)/$(imageName):latest $(system.defaultWorkingDirectory)/$(projectName)

  # displayName: 'docker build'

    # Login to Docker

#    docker login -u $(dockerId) -p $(pswd)
#    cd Build
#    docker build -f Dockerfile -t $(dockerId)/$(imageName) .
#    docker push $(dockerId)/$(imageName)

#- task: Kubernetes@1
#  displayName: kubectl apply

# steps:
# - task: Kubernetes@1
#   displayName: kubectl apply
#   inputs:
#     connectionType: Azure Resource Manager
#     azureSubscriptionEndpoint: $(azureSubscriptionEndpoint)
#     azureResourceGroup: $(azureResourceGroup)
#     kubernetesCluster: $(kubernetesCluster)

#    command: apply
#    arguments: -f Deploy/web-svc-1.yml

#  inputs:
#    connectionType: Kubernetes Service Connection
#    kubernetesServiceEndpoint: connection-kubernetes
#    containerregistrytype: Container Registry
#    dockerRegistryEndpoint: connection-docker
#    command: login

#    azureSubscriptionEndpoint: $(azureSubscriptionEndpoint)
#    azureResourceGroup: $(azureResourceGroup)
#    kubernetesCluster: $(kubernetesCluster)
#    command: apply
#    arguments: -f Deploy/web-svc-1.yml
