# Docker image
# Build a Docker image to deploy, run, or push to a container registry.
# Add steps that use Docker Compose, tag images, push to a registry, run an image, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

pool:
  vmImage: 'Ubuntu-16.04'

variables:
  configuration: debug
  projectName: py-red
  buildDir: Build
  deployDir: Deploy
  chartDir: Deploy/mychart
  chartPackageName: mychart
  kubectl: $(build.artifactStagingDirectory)/kubectl
  imageName: $(projectName):$(build.buildId)
  registryName: azurekubernetesregistry
  registryServerName: $(registryName).azurecr.io

  dockerId: brunoterkaly
  azureResourceGroup: rg-my-aks-cluster
  kubernetesCluster: my-aks-cluster
  azureContainerRegistry: $registryName.azurecr.io

#==================================================================
# TRIGGERS
#==================================================================
trigger:
  branches:
    include:
    - master
    - features/*
  paths:
    include:
    - k8s-multi-container

#==================================================================
# STEPS SECTION
#==================================================================

steps:

#==================================================================
# Install Helm
#==================================================================

- task: HelmInstaller@0
  displayName: Helm Installer
  inputs:
    helmVersion: 2.12.2
    checkLatestHelmVersion: true
    installKubectl: true
    kubectlVersion: 1.13.0
    checkLatestKubectl: true

#==================================================================
# BUILD IMAGE
#==================================================================
- bash: docker build -f $(system.defaultWorkingDirectory)/$(buildDir)/Dockerfile -t $(registryServerName)/$(imageName) $(system.defaultWorkingDirectory)/$(buildDir)
- bash: docker build -f $(system.defaultWorkingDirectory)/$(buildDir)/Dockerfile -t $(registryServerName)/$(projectName):latest $(system.defaultWorkingDirectory)/$(buildDir)
  displayName: 'docker build'

- bash: docker login $(registryServerName) -u $(registryLogin) -p $(registryPassword)
  displayName: 'docker login'

#==================================================================
# PUSH IMAGE
#==================================================================
- bash: |
    docker push  $(registryServerName)/$(imageName)
    docker push $(registryServerName)/$(projectName):latest
  displayName: 'docker push'

#==================================================================
#
#==================================================================
- bash: |
    az login --service-principal -u $(clusterLogin) -p $(clusterPassword) -t $(tenantId)
    az aks install-cli --install-location $(build.artifactStagingDirectory)/kubectl
    az aks get-credentials --resource-group $(azureResourceGroup) --name $(kubernetesCluster) --admin --verbose
    export KUBECONFIG=/home/vsts/.kube/config
  displayName: 'setup kubectl'

#==================================================================
#
#==================================================================
- bash: |
    echo "az acr helm list -n $(registryName)"
    az acr helm list -n $(registryName)
    echo ""
  displayName: 'List registry'

#==================================================================
#
#==================================================================
- bash: |
    echo "az acr helm repo add -n  $(registryName)"
    az acr helm repo add -n  $(registryName)
  displayName: 'Repo add'

#==================================================================
#
#==================================================================
- bash: |
    echo "helm package --version $(build.buildId) --destination $(build.artifactStagingDirectory) $(system.defaultWorkingDirectory)/$(chartDir)"
    helm package --version $(build.buildId) --destination $(build.artifactStagingDirectory) $(system.defaultWorkingDirectory)/$(chartDir)
  displayName: 'helm package'

#==================================================================
#
#==================================================================
- bash: |
    echo "az acr helm push -n $(registryName) $(build.artifactStagingDirectory)/$(chartPackageName)-$(build.buildId).tgz"
    az acr helm push -n $(registryName) $(build.artifactStagingDirectory)/$(chartPackageName)-$(build.buildId).tgz
  displayName: 'helm push'

#==================================================================
#
#==================================================================
- bash: |
    echo "az acr helm repo add -n  $(registryName)"
     az acr helm repo add -n  $(registryName)

    echo "az acr helm delete -n $(registryName)  $(chartPackageName) --yes"
    az acr helm delete -n $(registryName)  $(chartPackageName) --yes

    echo "az acr helm push $(build.artifactStagingDirectory)/$(chartPackageName)-$(build.buildId).tgz"
    az acr helm push -n $(registryName) $(build.artifactStagingDirectory)/$(chartPackageName)-$(build.buildId).tgz

    echo "az acr helm list -n $(registryName)"
    az acr helm list -n $(registryName)

    echo "helm inspect $(registryName)/$(chartPackageName)"
    helm inspect $(registryName)/$(chartPackageName)

    echo "az acr helm show -n $(registryName)  $(chartPackageName)"
    az acr helm show -n $(registryName)  $(chartPackageName) 

#az acr helm push -n MyRegistry mychart-0.3.2.tgz

#==================================================================
#
#==================================================================
- bash: |
    echo "helm install --namespace dev $(registryName)/$(chartPackageName)"
    $(kubectl) delete svc  mysql --namespace dev
    $(kubectl) delete svc web --namespace dev
    $(kubectl) delete pod web1 --namespace dev
    $(kubectl) delete pod mysql --namespace dev
    helm install --namespace dev $(registryName)/$(chartPackageName)

#    helm upgrade --namespace dev $(registryName)/$(chartPackageName)
#    helm install --namespace dev $(registryName)/$(chartPackageName)

  displayName: 'helm upgrade'

#==================================================================
# Misc Commands
#==================================================================

- bash:
   echo "Default Working Directory"
- bash:
   echo $(system.defaultWorkingDirectory)
- bash:
   ls -latr $(system.defaultWorkingDirectory)

- bash:
   echo "Project Name"
- bash:
    echo $(projectName)

- bash: echo $(registryServerName)

- bash: echo $(imageName)

#==================================================================
# Other snippets
#==================================================================
#condition: and(succeeded(), eq(variables['build.sourceBranch'], 'refs/heads/master'))
#- bash: docker build -f $(system.defaultWorkingDirectory)/$(projectName)/Dockerfile -t $(registryServerName)/$(imageName):$(build.buildId) -t $(registryServerName)/$(imageName):latest $(system.defaultWorkingDirectory)/$(projectName)

  # displayName: 'docker build'

    # Login to Docker

#    docker login -u $(dockerId) -p $(pswd)
#    cd Build
#    docker build -f Dockerfile -t $(dockerId)/$(imageName) .
#    docker push $(dockerId)/$(imageName)

#- task: Kubernetes@1
#  displayName: kubectl apply

# steps:
# - task: Kubernetes@1
#   displayName: kubectl apply
#   inputs:
#     connectionType: Azure Resource Manager
#     azureSubscriptionEndpoint: $(azureSubscriptionEndpoint)
#     azureResourceGroup: $(azureResourceGroup)
#     kubernetesCluster: $(kubernetesCluster)

#    command: apply
#    arguments: -f Deploy/web-svc-1.yml

#  inputs:
#    connectionType: Kubernetes Service Connection
#    kubernetesServiceEndpoint: connection-kubernetes
#    containerregistrytype: Container Registry
#    dockerRegistryEndpoint: connection-docker
#    command: login

#    azureSubscriptionEndpoint: $(azureSubscriptionEndpoint)
#    azureResourceGroup: $(azureResourceGroup)
#    kubernetesCluster: $(kubernetesCluster)
#    command: apply
#    arguments: -f Deploy/web-svc-1.yml

# Notes and commands
# =========================================
# Fired off
# Continue to track all commands
# Understand why not getting update
# what the picture with acr (google images)
# --------------------------------
# az acr helm push -n MyRegistry mychart-0.3.2.tgz --force
# az acr helm delete wordpress --version 2.1.10
# az acr helm show -n MyRegistry mychart
# az acr helm show -n MyRegistry mychart --version 0.3.2
# az acr helm push wordpress-2.1.10.tgz
# az acr helm list
# helm inspect myacrhelm/wordpress
# az acr helm show wordpress
# --------------------------------
# helm install testapi-0.1.0.tgz
# helm ls
# kubectl get deployments
# helm delete ordered-quoll
# helm upgrade ordered-quoll .
# helm install helmet-chart-0.0.1.tgz --debug
# helm repo add helmet http://192.168.99.100:31162/charts/
# --------------------------------
# helm init
# helm list
# helm repo add/list/remove
# helm upgrade
# --------------------------------
